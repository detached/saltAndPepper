plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.3'
    id 'org.flywaydb.flyway' version '7.0.2'
    id 'nu.studer.jooq' version '5.1.1'
    id 'org.siouan.frontend-jdk11' version '4.0.1'
}

version "0.1"
group "de.w3is"
mainClassName = "de.w3is.recipes.ApplicationKt"

repositories {
    mavenCentral()
}

configurations {
    flywayMigration
}

dependencies {
    flywayMigration("com.h2database:h2:${h2Version}")
    jooqGenerator("com.h2database:h2:${h2Version}")

    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut.data:micronaut-data-processor")

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("javax.annotation:javax.annotation-api")
    implementation("javax.transaction:javax.transaction-api:1.3")

    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.security:micronaut-security-session")
    implementation("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.views:micronaut-views-velocity")
    implementation("io.micronaut.cache:micronaut-cache-core")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("org.springframework.security:spring-security-core:${springSecurityVersion}")
    implementation("net.coobird:thumbnailator:${thumbnailatorVersion}")
    implementation("org.apache.commons:commons-text:${commonsTextVersion}")
    implementation("org.apache.velocity:velocity-tools:${velocityToolsVersion}")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.postgresql:postgresql:${postgresqlJdbcVersion}")

    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation("com.willowtreeapps.assertk:assertk:${assertKVersion}")
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", false)
        arg("micronaut.processing.annotations", "de.w3is.recipes.*")
    }
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental false
        annotations "de.w3is.recipes.*"
    }
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:h2:~/test;AUTO_SERVER=TRUE;MODE=PostgreSQL'
    user = 'sa'
    password = ''
}

jooq {
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.h2.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.h2.H2Database'
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = 'de.w3is.recipes.infra.persistence.generated'
                    }
                }
            }
        }
    }
}

frontend {
    yarnVersion.set("1.22.10")
    nodeVersion.set("14.15.0")

    yarnEnabled.set(true)
    yarnDistributionProvided.set(true)
    nodeDistributionProvided.set(false)

    packageJsonDirectory.set(file("./src/main/js/"))

    assembleScript.set("run build")
}

task(copyFrontendBundle, type: Copy) {
    dependsOn assembleFrontend
    from(file('src/main/js/dist/')) {
        include '**/*'
    }
    into('build/resources/main/public/')
}
processResources.dependsOn(copyFrontendBundle)

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}