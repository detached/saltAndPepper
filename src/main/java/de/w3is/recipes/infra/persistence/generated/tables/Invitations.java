/*
 * This file is generated by jOOQ.
 */
package de.w3is.recipes.infra.persistence.generated.tables;


import de.w3is.recipes.infra.persistence.generated.Keys;
import de.w3is.recipes.infra.persistence.generated.Public;
import de.w3is.recipes.infra.persistence.generated.tables.records.InvitationsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invitations extends TableImpl<InvitationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invitations</code>
     */
    public static final Invitations INVITATIONS = new Invitations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationsRecord> getRecordType() {
        return InvitationsRecord.class;
    }

    /**
     * The column <code>public.invitations.id</code>.
     */
    public final TableField<InvitationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invitations.user_id</code>.
     */
    public final TableField<InvitationsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.invitations.invitation_code</code>.
     */
    public final TableField<InvitationsRecord, String> INVITATION_CODE = createField(DSL.name("invitation_code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.invitations.created_on</code>.
     */
    public final TableField<InvitationsRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Invitations(Name alias, Table<InvitationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invitations(Name alias, Table<InvitationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invitations</code> table reference
     */
    public Invitations(String alias) {
        this(DSL.name(alias), INVITATIONS);
    }

    /**
     * Create an aliased <code>public.invitations</code> table reference
     */
    public Invitations(Name alias) {
        this(alias, INVITATIONS);
    }

    /**
     * Create a <code>public.invitations</code> table reference
     */
    public Invitations() {
        this(DSL.name("invitations"), null);
    }

    public <O extends Record> Invitations(Table<O> child, ForeignKey<O, InvitationsRecord> key) {
        super(child, key, INVITATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<InvitationsRecord, Integer> getIdentity() {
        return (Identity<InvitationsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvitationsRecord> getPrimaryKey() {
        return Keys.INVITATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<InvitationsRecord>> getKeys() {
        return Arrays.<UniqueKey<InvitationsRecord>>asList(Keys.INVITATIONS_PKEY);
    }

    @Override
    public Invitations as(String alias) {
        return new Invitations(DSL.name(alias), this);
    }

    @Override
    public Invitations as(Name alias) {
        return new Invitations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitations rename(String name) {
        return new Invitations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitations rename(Name name) {
        return new Invitations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
