/*
 * This file is generated by jOOQ.
 */
package de.w3is.recipes.infra.persistence.generated.tables;


import de.w3is.recipes.infra.persistence.generated.Indexes;
import de.w3is.recipes.infra.persistence.generated.Keys;
import de.w3is.recipes.infra.persistence.generated.Public;
import de.w3is.recipes.infra.persistence.generated.tables.records.RecipesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recipes extends TableImpl<RecipesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recipes</code>
     */
    public static final Recipes RECIPES = new Recipes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipesRecord> getRecordType() {
        return RecipesRecord.class;
    }

    /**
     * The column <code>public.recipes.id</code>.
     */
    public final TableField<RecipesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.recipes.recipe_id</code>.
     */
    public final TableField<RecipesRecord, String> RECIPE_ID = createField(DSL.name("recipe_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.recipes.author_id</code>.
     */
    public final TableField<RecipesRecord, String> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.recipes.title</code>.
     */
    public final TableField<RecipesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.recipes.category</code>.
     */
    public final TableField<RecipesRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.cuisine</code>.
     */
    public final TableField<RecipesRecord, String> CUISINE = createField(DSL.name("cuisine"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.yields</code>.
     */
    public final TableField<RecipesRecord, String> YIELDS = createField(DSL.name("yields"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.ingredients</code>.
     */
    public final TableField<RecipesRecord, String> INGREDIENTS = createField(DSL.name("ingredients"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.instructions</code>.
     */
    public final TableField<RecipesRecord, String> INSTRUCTIONS = createField(DSL.name("instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.modifications</code>.
     */
    public final TableField<RecipesRecord, String> MODIFICATIONS = createField(DSL.name("modifications"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.recipes.images</code>.
     */
    public final TableField<RecipesRecord, String> IMAGES = createField(DSL.name("images"), SQLDataType.CLOB, this, "");

    private Recipes(Name alias, Table<RecipesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Recipes(Name alias, Table<RecipesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.recipes</code> table reference
     */
    public Recipes(String alias) {
        this(DSL.name(alias), RECIPES);
    }

    /**
     * Create an aliased <code>public.recipes</code> table reference
     */
    public Recipes(Name alias) {
        this(alias, RECIPES);
    }

    /**
     * Create a <code>public.recipes</code> table reference
     */
    public Recipes() {
        this(DSL.name("recipes"), null);
    }

    public <O extends Record> Recipes(Table<O> child, ForeignKey<O, RecipesRecord> key) {
        super(child, key, RECIPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECIPE_ID_IDX);
    }

    @Override
    public Identity<RecipesRecord, Integer> getIdentity() {
        return (Identity<RecipesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecipesRecord> getPrimaryKey() {
        return Keys.RECIPES_PKEY;
    }

    @Override
    public List<UniqueKey<RecipesRecord>> getKeys() {
        return Arrays.<UniqueKey<RecipesRecord>>asList(Keys.RECIPES_PKEY, Keys.RECIPES_RECIPE_ID_KEY);
    }

    @Override
    public Recipes as(String alias) {
        return new Recipes(DSL.name(alias), this);
    }

    @Override
    public Recipes as(Name alias) {
        return new Recipes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipes rename(String name) {
        return new Recipes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipes rename(Name name) {
        return new Recipes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
