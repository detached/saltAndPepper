/*
 * This file is generated by jOOQ.
 */
package de.w3is.recipes.infra.persistence.generated.tables.records;


import de.w3is.recipes.infra.persistence.generated.tables.Images;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImagesRecord extends UpdatableRecordImpl<ImagesRecord> implements Record4<Integer, String, byte[], byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.images.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.images.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.images.image_id</code>.
     */
    public void setImageId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.images.image_id</code>.
     */
    public String getImageId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.images.data</code>.
     */
    public void setData(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.images.data</code>.
     */
    public byte[] getData() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.images.thumbnail</code>.
     */
    public void setThumbnail(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.images.thumbnail</code>.
     */
    public byte[] getThumbnail() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, byte[], byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Images.IMAGES.ID;
    }

    @Override
    public Field<String> field2() {
        return Images.IMAGES.IMAGE_ID;
    }

    @Override
    public Field<byte[]> field3() {
        return Images.IMAGES.DATA;
    }

    @Override
    public Field<byte[]> field4() {
        return Images.IMAGES.THUMBNAIL;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getImageId();
    }

    @Override
    public byte[] component3() {
        return getData();
    }

    @Override
    public byte[] component4() {
        return getThumbnail();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getImageId();
    }

    @Override
    public byte[] value3() {
        return getData();
    }

    @Override
    public byte[] value4() {
        return getThumbnail();
    }

    @Override
    public ImagesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ImagesRecord value2(String value) {
        setImageId(value);
        return this;
    }

    @Override
    public ImagesRecord value3(byte[] value) {
        setData(value);
        return this;
    }

    @Override
    public ImagesRecord value4(byte[] value) {
        setThumbnail(value);
        return this;
    }

    @Override
    public ImagesRecord values(Integer value1, String value2, byte[] value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImagesRecord
     */
    public ImagesRecord() {
        super(Images.IMAGES);
    }

    /**
     * Create a detached, initialised ImagesRecord
     */
    public ImagesRecord(Integer id, String imageId, byte[] data, byte[] thumbnail) {
        super(Images.IMAGES);

        setId(id);
        setImageId(imageId);
        setData(data);
        setThumbnail(thumbnail);
    }
}
